const GPU_LIMITS = [
    "maxBindGroups",
    "maxBindingsPerBindGroup",
    "maxBindGroupsPlusVertexBuffers",
    "maxBufferSize",
    "maxColorAttachmentBytesPerSample",
    "maxColorAttachments",
    "maxComputeInvocationsPerWorkgroup",
    "maxComputeWorkgroupSizeX",
    "maxComputeWorkgroupSizeY",
    "maxComputeWorkgroupSizeZ",
    "maxComputeWorkgroupStorageSize",
    "maxComputeWorkgroupsPerDimension",
    "maxDynamicStorageBuffersPerPipelineLayout",
    "maxDynamicUniformBuffersPerPipelineLayout",
    "maxInterStageShaderComponents",
    "maxInterStageShaderVariables",
    "maxSampledTexturesPerShaderStage",
    "maxSamplersPerShaderStage",
    "maxStorageBufferBindingSize",
    "maxStorageBuffersPerShaderStage",
    "maxStorageTexturesPerShaderStage",
    "maxTextureArrayLayers",
    "maxTextureDimension1D",
    "maxTextureDimension2D",
    "maxTextureDimension3D",
    "maxUniformBufferBindingSize",
    "maxUniformBuffersPerShaderStage",
    "maxVertexAttributes",
    "maxVertexBufferArrayStride",
    "maxVertexBuffers",
    "minStorageBufferOffsetAlignment",
    "minUniformBufferOffsetAlignment"
];

const GPU_FEATURES = [
    "depth-clip-control",
    "depth32float-stencil8",
    "texture-compression-bc",
    "texture-compression-etc2",
    "texture-compression-astc",
    "timestamp-query",
    "indirect-first-instance",
    "shader-f16",
    "rg11b10ufloat-renderable",
    "bgra8unorm-storage",
    "float32-filterable"
];

const GPU_INFOS = [
    "architecture",
    "description",
    "device",
    "vendor"
];

const GPU_TEXTURE_FORMATS = [
    "r8unorm",
    "r8snorm",
    "r8uint",
    "r8sint",
    "r16uint",
    "r16sint",
    "r16float",
    "rg8unorm",
    "rg8snorm",
    "rg8uint",
    "rg8sint",
    "r32uint",
    "r32sint",
    "r32float",
    "rg16uint",
    "rg16sint",
    "rg16float",
    "rgba8unorm",
    "rgba8unorm-srgb",
    "rgba8snorm",
    "rgba8uint",
    "rgba8sint",
    "bgra8unorm",
    "bgra8unorm-srgb",
    "rgb9e5ufloat",
    "rgb10a2uint",
    "rgb10a2unorm",
    "rg11b10ufloat",
    "rg32uint",
    "rg32sint",
    "rg32float",
    "rgba16uint",
    "rgba16sint",
    "rgba16float",
    "rgba32uint",
    "rgba32sint",
    "rgba32float",
    "stencil8",
    "depth16unorm",
    "depth24plus",
    "depth24plus-stencil8",
    "depth32float",
    "depth32float-stencil8",
    "bc1-rgba-unorm",
    "bc1-rgba-unorm-srgb",
    "bc2-rgba-unorm",
    "bc2-rgba-unorm-srgb",
    "bc3-rgba-unorm",
    "bc3-rgba-unorm-srgb",
    "bc4-r-unorm",
    "bc4-r-snorm",
    "bc5-rg-unorm",
    "bc5-rg-snorm",
    "bc6h-rgb-ufloat",
    "bc6h-rgb-float",
    "bc7-rgba-unorm",
    "bc7-rgba-unorm-srgb",
    "etc2-rgb8unorm",
    "etc2-rgb8unorm-srgb",
    "etc2-rgb8a1unorm",
    "etc2-rgb8a1unorm-srgb",
    "etc2-rgba8unorm",
    "etc2-rgba8unorm-srgb",
    "eac-r11unorm",
    "eac-r11snorm",
    "eac-rg11unorm",
    "eac-rg11snorm",
    "astc-4x4-unorm",
    "astc-4x4-unorm-srgb",
    "astc-5x4-unorm",
    "astc-5x4-unorm-srgb",
    "astc-5x5-unorm",
    "astc-5x5-unorm-srgb",
    "astc-6x5-unorm",
    "astc-6x5-unorm-srgb",
    "astc-6x6-unorm",
    "astc-6x6-unorm-srgb",
    "astc-8x5-unorm",
    "astc-8x5-unorm-srgb",
    "astc-8x6-unorm",
    "astc-8x6-unorm-srgb",
    "astc-8x8-unorm",
    "astc-8x8-unorm-srgb",
    "astc-10x5-unorm",
    "astc-10x5-unorm-srgb",
    "astc-10x6-unorm",
    "astc-10x6-unorm-srgb",
    "astc-10x8-unorm",
    "astc-10x8-unorm-srgb",
    "astc-10x10-unorm",
    "astc-10x10-unorm-srgb",
    "astc-12x10-unorm",
    "astc-12x10-unorm-srgb",
    "astc-12x12-unorm",
    "astc-12x12-unorm-srgb",
];

const REPORT_DESCRIPTIONS = {
    infos: "Informations about your GPUAdapter given to your browser. Values may differ depending on your browser.",
    limits: "Limits supported by your GPUAdapter, compared with the minimum limits theoretically supported by all WebGPU implementations. Values in bold are the limits of your GPUAdapter that are better than the minimum limit. Limits may differ depending on your browser.",
    features: "Additional functionalities supported by your GPUAdapter. Support may differ depending on your browser.",
    formats: "Texture formats supported by your GPUAdapter. Support may differ depending on your browser.",
};

const INFO_DESCRIPTIONS = {
    maxBindGroups: "The maximum number of GPUBindGroupLayouts allowed in bindGroupLayouts when creating a GPUPipelineLayout.",
    maxBindingsPerBindGroup: "The number of binding indices available when creating a GPUBindGroupLayout.",
    maxBindGroupsPlusVertexBuffers: "The maximum number of bind group and vertex buffer slots used simultaneously, counting any empty slots below the highest index. Validated in createRenderPipeline() and in draw calls.",
    maxBufferSize: "The maximum value of size attribute when creating a GPUBuffer.",
    maxColorAttachmentBytesPerSample: "The maximum number of bytes necessary to hold one sample (pixel or subpixel) of render pipeline output data, across all color attachments.",
    maxColorAttachments: "The maximum allowed number of color attachments in GPURenderPipelineDescriptor.fragment.targets, GPURenderPassDescriptor.colorAttachments, and GPURenderPassLayout.colorFormats.",
    maxComputeInvocationsPerWorkgroup: "The maximum value of the product of the workgroup_size dimensions for a compute stage GPUShaderModule entry-point.",
    maxComputeWorkgroupSizeX: "The maximum value of the workgroup_size X dimension for a compute stage GPUShaderModule entry-point.",
    maxComputeWorkgroupSizeY: "The maximum value of the workgroup_size Y dimension for a compute stage GPUShaderModule entry-point.",
    maxComputeWorkgroupSizeZ: "The maximum value of the workgroup_size Z dimension for a compute stage GPUShaderModule entry-point.",
    maxComputeWorkgroupStorageSize: "The maximum number of bytes of workgroup storage used for a compute stage GPUShaderModule entry-point.",
    maxComputeWorkgroupsPerDimension: "The maximum value for the arguments of dispatchWorkgroups(workgroupCountX, workgroupCountY, workgroupCountZ).",
    maxDynamicStorageBuffersPerPipelineLayout: "The maximum number of GPUBindGroupLayoutEntry entries across a GPUPipelineLayout which are storage buffers with dynamic offsets.",
    maxDynamicUniformBuffersPerPipelineLayout: "The maximum number of GPUBindGroupLayoutEntry entries across a GPUPipelineLayout which are uniform buffers with dynamic offsets.",
    maxInterStageShaderComponents: "The maximum allowed number of components of input or output variables for inter-stage communication (like vertex outputs or fragment inputs).",
    maxInterStageShaderVariables: "The maximum allowed number of input or output variables for inter-stage communication (like vertex outputs or fragment inputs).",
    maxSampledTexturesPerShaderStage: "For each possible GPUShaderStage stage, the maximum number of GPUBindGroupLayoutEntry entries across a GPUPipelineLayout which are sampled textures.",
    maxSamplersPerShaderStage: "For each possible GPUShaderStage stage, the maximum number of GPUBindGroupLayoutEntry entries across a GPUPipelineLayout which are samplers.",
    maxStorageBufferBindingSize: "The maximum GPUBufferBinding.size for bindings with a GPUBindGroupLayoutEntry entry for which entry.buffer?.type is 'storage' or 'read-only-storage'.",
    maxStorageBuffersPerShaderStage: "For each possible GPUShaderStage stage, the maximum number of GPUBindGroupLayoutEntry entries across a GPUPipelineLayout which are storage buffers.",
    maxStorageTexturesPerShaderStage: "For each possible GPUShaderStage stage, the maximum number of GPUBindGroupLayoutEntry entries across a GPUPipelineLayout which are storage textures.",
    maxTextureArrayLayers: "The maximum allowed value for the size.depthOrArrayLayers of a texture created with dimension '2d'.",
    maxTextureDimension1D: "The maximum allowed value for the size.width of a texture created with dimension '1d'.",
    maxTextureDimension2D: "The maximum allowed value for the size.width and size.height of a texture created with dimension '2d'.",
    maxTextureDimension3D: "The maximum allowed value for the size.width, size.height and size.depthOrArrayLayers of a texture created with dimension '3d'.",
    maxUniformBufferBindingSize: "The maximum GPUBufferBinding.size for bindings with a GPUBindGroupLayoutEntry entry for which entry.buffer?.type is 'uniform'.",
    maxUniformBuffersPerShaderStage: "For each possible GPUShaderStage stage, the maximum number of GPUBindGroupLayoutEntry entries across a GPUPipelineLayout which are uniform buffers.",
    maxVertexAttributes: "The maximum number of attributes in total across buffers when creating a GPURenderPipeline.",
    maxVertexBufferArrayStride: "The maximum allowed arrayStride when creating a GPURenderPipeline.",
    maxVertexBuffers: "The maximum number of buffers when creating a GPURenderPipeline.",
    minStorageBufferOffsetAlignment: "The required alignment for GPUBufferBinding.offset and the dynamic offsets provided in setBindGroup(), for bindings with a GPUBindGroupLayoutEntry entry for which entry.buffer?.type is 'storage' or 'read-only-storage'.",
    minUniformBufferOffsetAlignment: "The required alignment for GPUBufferBinding.offset and the dynamic offsets provided in setBindGroup(), for bindings with a GPUBindGroupLayoutEntry entry for which entry.buffer?.type is 'uniform'.",
    "depth-clip-control": "Allows depth clipping to be disabled.",
    "depth32float-stencil8": "Allows for explicit creation of textures of format 'depth32float-stencil8'.",
    "texture-compression-bc": "Allows for explicit creation of textures of BC compressed formats.",
    "texture-compression-etc2": "Allows for explicit creation of textures of ETC2 compressed formats.",
    "texture-compression-astc": "Allows for explicit creation of textures of ASTC compressed formats.",
    "timestamp-query": "Adds the ability to query timestamps from GPU command buffers.",
    "indirect-first-instance": "Allows the use of non-zero firstInstance values in indirect draw parameters and indirect drawIndexed parameters.",
    "shader-f16": "Allows the use of the half-precision floating-point type f16 in WGSL.",
    "rg11b10ufloat-renderable": "Allows the RENDER_ATTACHMENT usage on textures with format 'rg11b10ufloat', and also allows textures of that format to be blended and multisampled.",
    "bgra8unorm-storage": "Allows the STORAGE_BINDING usage on textures with format 'bgra8unorm'.",
    "float32-filterable": "Makes textures with formats 'r32float', 'rg32float', and 'rgba32float' filterable.",
};

export { GPU_LIMITS, GPU_FEATURES, GPU_INFOS, GPU_TEXTURE_FORMATS, REPORT_DESCRIPTIONS, INFO_DESCRIPTIONS };